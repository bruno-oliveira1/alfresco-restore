#!/bin/bash

# Backup of Alfresco
# Based on script written by Chris Newald avaliable in https://community.alfresco.com/thread/202783-backup-and-restore-procedures
# Rewriteen by Bruno Oliveira

# Configuration:
  AL_FOLDER="/opt/alfresco-community"			# Alfresco folder
  AL_DATA="/opt/alfresco-community/alf_data"		# Alfresco data folder
  DB_HOME="/opt/alfresco-community/postgresql"	        # PostgreSQL folder
  BACKUP_FOLDER="/opt/alfresco-community/backup"	# Alfresco backup folder
  POSTGRESPASS="password"                          	# Postgresql password defined in alfresco installation
  					                # Create timestamp using format month, day, year, hour, minute   
  TIMESTAMP=$(date +%mM-%dD-%YA-%HH-%MM)	  	# used in the log file and to name current data folder backup with you choose 
                                                        # to backup current data


# Function - Stop Alfresco
function al_stop()
{
  $AL_FOLDER/alfresco.sh stop  > /dev/null 2>&1

  # If Alfresco does not stop we MUST exit script
  # Backing up files with Alfresco working may
  # corrupt data indexes!!
  if [ "$?" != "0" ]; then
    echo "Alfresco Stop FAILED - STOP SCRIPT!"
    exit 1;
  fi
}

# Function - Start Alfresco
function al_start()
{
  $AL_FOLDER/alfresco.sh start > /dev/null 2>&1
}

# Function - Start Postgress SQL Server
function p_start()
{
  $DB_HOME/scripts/ctl.sh start > /dev/null 2>&1
}

# Function - Stop Postgress SQL Server
function p_stop()
{
  $DB_HOME/scripts/ctl.sh stop > /dev/null 2>&1
}

#----------------------------------------
# 1 - Begin by stopping Alfresco
#----------------------------------------
  al_stop 

# Check if an error was returned
  if [ "$?" = "0" ]; then
      echo "Alfresco stopped successful"
    else
      echo "Alfresco stopping failed"
      exit
  fi

  # Start the postgress database which is stopped automatically
  # by the Alfresco stop script 
  p_start
  
# Check if an error was returned
  if [ "$?" = "0" ]; then
      echo "Postgress started successful"
    else
      echo "Postgress starting failed"
      exit
  fi

  clear

#----------------------------------------
# 2 - Showing backups
#----------------------------------------

# Function - Restore Alfresco backup
function backup_restore()
{

# Extract select backup to backup folder
  echo "Extracting backup file"
   tar xvf $BACKUP_FOLDER/${backup}.tgz -C /
  
# Check if an error was returned
  if [ "$?" = "0" ]; then
      echo "Backup file extracted successful"
    else
      echo "Backup file extracting failed"
      exit
  fi

# Alfresco postgres dump file
  DB_DUMP=alfresco_db_${backup}.tar

# Alfresco alf_data dump file 
  AL_DUMP=alfresco_data_${backup}.tgz

# Drop and create alfresco database
  su -c "PGPASSWORD=$POSTGRESPASS $DB_HOME/bin/dropdb -U alfresco alfresco" -s /bin/sh postgres;

# Check if an error was returned
  if [ "$?" = "0" ]; then
      echo "Alfresco database dropped successful"
    else
      echo "Alfresco database dropped failed"
      exit
  fi

  su -c "PGPASSWORD=$POSTGRESPASS $DB_HOME/bin/createdb -O alfresco alfresco" -s /bin/sh postgres;

# Check if an error was returned
  if [ "$?" = "0" ]; then
      echo "Alfresco database created successful"
    else
      echo "Alfresco database created failed"
      exit
  fi

# Restore database from tar file
  su -c "PGPASSWORD=$POSTGRESPASS $DB_HOME/bin/pg_restore -d alfresco $BACKUP_FOLDER/${backup}/$DB_DUMP" -s /bin/sh postgres;

  # Check if an error was returned
  if [ "$?" = "0" ]; then
      echo "Alfresco database restore successful"
    else
      echo "Alfresco database restore failed"
      exit
  fi

# Stopped postgresql server
  p_stop
  
# Restore alf_data
  echo "Restoring alf_data folder"
  tar xvf $BACKUP_FOLDER/${backup}/$AL_DUMP -C /
   
  # Alfresco data restore check if an error was returned
  if [ "$?" = "0" ]; then
      echo "Alfresco data restore worked!"
    else
      echo "Alfresco data restore failed!"
  fi  
}

#----------------------------------------
# 3 - Restore backups
#----------------------------------------

 echo "You want to backup existing database ?" 
 echo "Answer 0 for yes or 1 for no"
 read answer

  if [ "$answer" = "0" ]; then

      echo "You choose backup existing data"
      echo
      
      # Create a filename for the database tar
      DB_DUMP_OLD=alfresco_db_${TIMESTAMP}.tar

      # Create a filename for the alf_data tgz
      AL_DUMP_OLD=alfresco_data_${TIMESTAMP}.tgz

      # Create the folder to store the current database  
      mkdir -p $BACKUP_FOLDER/${TIMESTAMP}.old/ 

      PGPASSWORD=$POSTGRESPASS $DB_HOME/bin/pg_dump -U alfresco alfresco -Ft > $BACKUP_FOLDER/${TIMESTAMP}.old/$DB_DUMP_OLD
       # Check if an error was returned
        if [ "$?" = "0" ]; then
          echo "Database export worked!"
        else
          echo "Database export failed!"
        fi
      chown postgres $BACKUP_FOLDER/${TIMESTAMP}.old/$DB_DUMP_OLD

      tar zcf $BACKUP_FOLDER/${TIMESTAMP}.old/$AL_DUMP_OLD $AL_DATA

      # Check if an error was returned
      if [ "$?" = "0" ]; then
        echo "Old Alf_data folder backup successful!"
      else
        echo "Old Alf_data folder backup failed!"
      fi

    else
      
      echo "You choose dont backup existing data"
      echo
  fi

  echo "The last backup is"
  backup=$(ls $BACKUP_FOLDER | cut -d. -f1 | tail -n -1)
  echo $backup
  echo
  echo "Choose your destiny"
  sleep 2
  echo "If you want to restore it ? Type it 0"
  sleep 1
  echo
  echo "Or show all avaliable backups ? Type it 1"
  read answer
  echo
  
  # Mortal Kombat easter egg array 
  mk=( "Excelent !!!" "HAHAHAHAHAHAHAHA !!!" "Well Done" "You Will Never Win !!!!" "Superb !!!!" ) 
  
  # Print a random value for mk array
  echo ${mk["$[RANDOM % ${#mk[@]}]"]};
	echo 
  sleep 2
  
  if [ "$answer" = "0" ]; then
      backup_restore
    else
       #  Create a array with list of backups
       bkplist=( $(ls $BACKUP_FOLDER | cut -d. -f1) )
  
       # Count backups 
       amount=$(ls $BACKUP_FOLDER | wc -l)
  
       echo "List of all backups"
       echo

       # Show backup list and put a number for all backups starting with 0  
         for (( i = 0; i < $amount; i++ )); do
           echo Backup number $i ${bkplist[$i]}
         done
         echo
         echo -n "Enter the number of the backup you want to restore "
         read i
         backup=$(echo ${bkplist[$i]})
         echo
         backup_restore
  fi
  
#----------------------------------------
# 4 - Starting alfresco and remove used files
#----------------------------------------  

# If all done start alfresco 
  al_start

# Delete extracted backup
rm -rf $BACKUP_FOLDER/${backup}/

#Unset variable postgresql password
  unset POSTGRESPASS
